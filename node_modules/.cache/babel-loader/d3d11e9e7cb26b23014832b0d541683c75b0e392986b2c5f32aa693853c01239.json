{"ast":null,"code":"export const BASE_URL = \"https://auth.nomoreparties.co\";\nfunction checkResponse(res) {\n  if (res.ok) {\n    return res.json();\n  }\n  return Promise.reject(res.status);\n}\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'aplication/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    try {\n      if (response.status === 200) {\n        return response.json();\n      }\n    } catch (err) {\n      return err;\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n};\nexport function login(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(checkResponse);\n}\nexport function getToken(jwt) {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${jwt}`\n    }\n  }).then(checkResponse);\n}","map":{"version":3,"names":["BASE_URL","checkResponse","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","body","JSON","stringify","then","response","err","catch","console","log","login","getToken","jwt","Authorization"],"sources":["/Users/andrey/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["export const BASE_URL = \"https://auth.nomoreparties.co\";\n\nfunction checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(res.status);\n  }\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'aplication/json'\n        },\n        body: JSON.stringify({email, password})\n    })\n    .then((response) => {\n        try {\n            if(response.status === 200) {\n                return response.json();\n            }\n        } catch (err) {\n            return (err)\n        }\n    })\n    .then ((res) => {\n        return res;\n    })\n    .catch((err) => console.log(err));\n}\n\nexport function login(email, password) {\n    return fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ email, password }),\n    }).then(checkResponse);\n  }\n  \n  export function getToken(jwt) {\n    return fetch(`${BASE_URL}/users/me`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${jwt}`,\n      },\n    }).then(checkResponse);\n  }"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,+BAA+B;AAEvD,SAASC,aAAa,CAACC,GAAG,EAAE;EACxB,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,EAAE;EACnB;EACA,OAAOC,OAAO,CAACC,MAAM,CAACJ,GAAG,CAACK,MAAM,CAAC;AACnC;AAEF,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACzC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IAC/BY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAACP,KAAK;MAAEC;IAAQ,CAAC;EAC1C,CAAC,CAAC,CACDO,IAAI,CAAEC,QAAQ,IAAK;IAChB,IAAI;MACA,IAAGA,QAAQ,CAACX,MAAM,KAAK,GAAG,EAAE;QACxB,OAAOW,QAAQ,CAACd,IAAI,EAAE;MAC1B;IACJ,CAAC,CAAC,OAAOe,GAAG,EAAE;MACV,OAAQA,GAAG;IACf;EACJ,CAAC,CAAC,CACDF,IAAI,CAAGf,GAAG,IAAK;IACZ,OAAOA,GAAG;EACd,CAAC,CAAC,CACDkB,KAAK,CAAED,GAAG,IAAKE,OAAO,CAACC,GAAG,CAACH,GAAG,CAAC,CAAC;AACrC,CAAC;AAED,OAAO,SAASI,KAAK,CAACd,KAAK,EAAEC,QAAQ,EAAE;EACnC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CAACO,IAAI,CAAChB,aAAa,CAAC;AACxB;AAEA,OAAO,SAASuB,QAAQ,CAACC,GAAG,EAAE;EAC5B,OAAOd,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASD,GAAI;IAC/B;EACF,CAAC,CAAC,CAACR,IAAI,CAAChB,aAAa,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}