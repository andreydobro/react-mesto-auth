{"ast":null,"code":"class AuthApi {\n  constructor(authUrl) {\n    this._authUrl = authUrl;\n  }\n  // Метод обработки ответа сервера\n  _processingServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`код ошибки: ${res.status}`);\n    }\n  }\n  // Метод верификации токена\n  tokenVerification(token) {\n    return fetch(`${this._authUrl}users/me`, {\n      // По умолчанию fetch — это GET, можно не указывать\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Bearer ${token}`\n      }\n    }).then(this._processingServerResponse);\n  }\n  // Метод авторизации пользователя\n  userAuthorization(password, email) {\n    return fetch(`${this._authUrl}signin`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(this._processingServerResponse);\n  }\n  // Метод регистрации пользователя\n  userRegistration(password, email) {\n    return fetch(`${this._authUrl}signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password,\n        email\n      })\n    }).then(this._processingServerResponse);\n  }\n}\n\n// Создание экземпляра класса\nconst apiAuth = new AuthApi('https://auth.nomoreparties.co');\n// Экспорт экземпляра класса\nexport default apiAuth;","map":{"version":3,"names":["AuthApi","constructor","authUrl","_authUrl","_processingServerResponse","res","ok","json","Promise","reject","status","tokenVerification","token","fetch","headers","then","userAuthorization","password","email","method","body","JSON","stringify","userRegistration","apiAuth"],"sources":["/Users/andrey/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["class AuthApi {\n  constructor(authUrl) {\n    this._authUrl = authUrl;\n  }\n  // Метод обработки ответа сервера\n  _processingServerResponse (res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`код ошибки: ${res.status}`);\n    }\n  }\n  // Метод верификации токена\n  tokenVerification (token) {\n    return fetch(`${this._authUrl}users/me`, {\n      // По умолчанию fetch — это GET, можно не указывать\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\" : `Bearer ${token}`\n      }\n    })\n      .then(this._processingServerResponse)\n  }\n  // Метод авторизации пользователя\n  userAuthorization (password, email) {\n    return fetch(`${this._authUrl}signin`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ password, email })\n    })\n      .then(this._processingServerResponse)\n  }\n  // Метод регистрации пользователя\n  userRegistration (password, email) {\n    return fetch(`${this._authUrl}signup`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ password, email })\n    })\n      .then(this._processingServerResponse)\n  }\n}\n\n// Создание экземпляра класса\nconst apiAuth = new AuthApi('https://auth.nomoreparties.co');\n// Экспорт экземпляра класса\nexport default apiAuth;\n"],"mappings":"AAAA,MAAMA,OAAO,CAAC;EACZC,WAAW,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO;EACzB;EACA;EACAE,yBAAyB,CAAEC,GAAG,EAAE;IAC9B,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB,CAAC,MAAM;MACL,OAAOC,OAAO,CAACC,MAAM,CAAE,eAAcJ,GAAG,CAACK,MAAO,EAAC,CAAC;IACpD;EACF;EACA;EACAC,iBAAiB,CAAEC,KAAK,EAAE;IACxB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,UAAS,EAAE;MACvC;MACAW,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAI,UAASF,KAAM;MACpC;IACF,CAAC,CAAC,CACCG,IAAI,CAAC,IAAI,CAACX,yBAAyB,CAAC;EACzC;EACA;EACAY,iBAAiB,CAAEC,QAAQ,EAAEC,KAAK,EAAE;IAClC,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,QAAO,EAAE;MACrCgB,MAAM,EAAE,MAAM;MACdL,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEC;MAAM,CAAC;IAC1C,CAAC,CAAC,CACCH,IAAI,CAAC,IAAI,CAACX,yBAAyB,CAAC;EACzC;EACA;EACAmB,gBAAgB,CAAEN,QAAQ,EAAEC,KAAK,EAAE;IACjC,OAAOL,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,QAAO,EAAE;MACrCgB,MAAM,EAAE,MAAM;MACdL,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDM,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL,QAAQ;QAAEC;MAAM,CAAC;IAC1C,CAAC,CAAC,CACCH,IAAI,CAAC,IAAI,CAACX,yBAAyB,CAAC;EACzC;AACF;;AAEA;AACA,MAAMoB,OAAO,GAAG,IAAIxB,OAAO,CAAC,+BAA+B,CAAC;AAC5D;AACA,eAAewB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}