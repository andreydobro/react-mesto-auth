{"ast":null,"code":"const apiData = {\n  url: 'https://mesto.nomoreparties.co/v1/cohort-52',\n  headers: {\n    authorization: 'df12ed01-f693-4b5e-b6fe-aa462d0d5b58',\n    'Content-Type': 'application/json'\n  }\n};\nclass Api {\n  constructor(config) {\n    this._url = config.url;\n    this._header = config.headers;\n  }\n  _requestResult(response) {\n    if (response.ok) {\n      return response.json();\n    } else {\n      return Promise.reject(`Ошибка ${response.status} - ${response.statusText}`);\n    }\n  }\n\n  //Запрос карточек с сеервера\n  getInitialCards() {\n    return fetch(`${this._url}/cards`, {\n      headers: this._header\n    }).then(this._requestResult);\n  }\n\n  //Запрос данных профиля с сеервера\n  getUserInfo() {\n    return fetch(`${this._url}/users/me`, {\n      headers: this._header\n    }).then(this._requestResult);\n  }\n  editUserInfo(name, about) {\n    return fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._header,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    }).then(this._requestResult);\n  }\n  editUserAvatar(avatar) {\n    return fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._header,\n      body: JSON.stringify({\n        avatar\n      })\n    }).then(this._requestResult);\n  }\n  createCard(name, link) {\n    return fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._header,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._requestResult);\n  }\n  addLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'PUT',\n      headers: this._header\n    }).then(this._requestResult);\n  }\n  removeLikeCard(cardId) {\n    return fetch(`${this._url}/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      headers: this._header\n    }).then(this._requestResult);\n  }\n  deleteCard(cardId) {\n    console.log(cardId);\n    return fetch(`${this._url}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._header\n    }).then(this._requestResult);\n  }\n}\nexport const api = new Api(apiData);","map":{"version":3,"names":["apiData","url","headers","authorization","Api","constructor","config","_url","_header","_requestResult","response","ok","json","Promise","reject","status","statusText","getInitialCards","fetch","then","getUserInfo","editUserInfo","name","about","method","body","JSON","stringify","editUserAvatar","avatar","createCard","link","addLikeCard","cardId","removeLikeCard","deleteCard","console","log","api"],"sources":["/Users/andrey/dev/mesto-react/src/utils/api.js"],"sourcesContent":["const apiData = {\n    url: 'https://mesto.nomoreparties.co/v1/cohort-52',\n    headers: {\n      authorization: 'df12ed01-f693-4b5e-b6fe-aa462d0d5b58',\n      'Content-Type': 'application/json'\n    },\n  }  \n\nclass Api {\n    constructor(config) {\n        this._url = config.url;\n        this._header = config.headers;\n    }\n\n    _requestResult(response) {\n        if (response.ok) {\n          return response.json();\n        } else {\n          return Promise.reject(\n            `Ошибка ${response.status} - ${response.statusText}`\n          );\n        }\n      }\n\n      //Запрос карточек с сеервера\n      getInitialCards() {\n        return fetch(`${this._url}/cards`, {\n          headers: this._header})\n          .then(this._requestResult)\n      }\n\n      //Запрос данных профиля с сеервера\n      getUserInfo() {\n        return fetch(`${this._url}/users/me`, {\n            headers: this._header})\n            .then(this._requestResult)\n    }\n\n    editUserInfo(name, about) {\n        return fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._header,\n            body: JSON.stringify({ name, about })\n        })\n        .then(this._requestResult)\n    }\n\n    editUserAvatar(avatar) {\n        return fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._header,\n            body: JSON.stringify({ avatar })\n        })\n        .then(this._requestResult)\n    }\n\n    createCard(name, link) {\n        return fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._header,\n            body: JSON.stringify({ name, link })\n        })\n        .then(this._requestResult)\n    }\n\n    addLikeCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n            method: 'PUT',\n            headers: this._header,\n        })\n        .then(this._requestResult)\n      }\n    \n      removeLikeCard(cardId) {\n        return fetch(`${this._url}/cards/${cardId}/likes`, {\n          method: 'DELETE',\n          headers: this._header,\n        })\n        .then(this._requestResult)\n      }\n    \n    \n      deleteCard(cardId) {\n        console.log(cardId)\n        return fetch(`${this._url}/cards/${cardId}`, {\n          method: 'DELETE',\n          headers: this._header,\n        })\n        .then(this._requestResult)\n      }\n}\n\nexport const api = new Api(apiData)"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}