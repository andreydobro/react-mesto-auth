{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co';\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  });\n};\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  });\n};\nexport const tokenCheck = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${token}`\n    }\n  }).then(res => {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(res.status);\n    }\n  });\n};","map":{"version":3,"names":["BASE_URL","register","email","password","fetch","method","headers","body","JSON","stringify","then","res","ok","json","Promise","reject","status","authorize","tokenCheck","token"],"sources":["/Users/andrey/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\n\nexport const register = (email, password) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ password, email })\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      else {\n        return Promise.reject(res.status)\n      }\n    })\n}\n\nexport const authorize = (email, password) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ password, email })\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      else {\n        return Promise.reject(res.status)\n      }\n    })\n}\n\nexport const tokenCheck = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\" : `Bearer ${token}`\n    }\n  })\n    .then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n      else {\n        return Promise.reject(res.status)\n      }\n    })\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAA+B;AAEhD,OAAO,MAAMC,QAAQ,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAACC,GAAG,IAAI;IACX,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB,CAAC,MACI;MACH,OAAOC,OAAO,CAACC,MAAM,CAACJ,GAAG,CAACK,MAAM,CAAC;IACnC;EACF,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,CAACf,KAAK,EAAEC,QAAQ,KAAK;EAC5C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAQ,EAAE;IACjCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CACCQ,IAAI,CAACC,GAAG,IAAI;IACX,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB,CAAC,MACI;MACH,OAAOC,OAAO,CAACC,MAAM,CAACJ,GAAG,CAACK,MAAM,CAAC;IACnC;EACF,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAME,UAAU,GAAIC,KAAK,IAAK;EACnC,OAAOf,KAAK,CAAE,GAAEJ,QAAS,WAAU,EAAE;IACnCK,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAI,UAASa,KAAM;IACpC;EACF,CAAC,CAAC,CACCT,IAAI,CAACC,GAAG,IAAI;IACX,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,EAAE;IACnB,CAAC,MACI;MACH,OAAOC,OAAO,CAACC,MAAM,CAACJ,GAAG,CAACK,MAAM,CAAC;IACnC;EACF,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}