{"ast":null,"code":"export const apiAuth = 'https://auth.nomoreparties.co/';\nexport const register = (password, email) => {\n  return fetch(`${apiAuth}/auth/local/register`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => {\n    try {\n      if (response.status === 200) {\n        return response.json();\n      }\n    } catch (e) {\n      return e;\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(err));\n};\nexport const authorize = (indentifier, password) => {\n  return fetch(`${apiAuth}/auth/local`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(response => response.json()).then(data => {\n    if (data.user) {\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    } else {}\n  }).catch(err => console.log(err));\n};\n\n// class AuthApi {\n//   constructor(authUrl) {\n//     this._authUrl = authUrl;\n//   }\n//   // Метод обработки ответа сервера\n//   _processingServerResponse (res) {\n//     if (res.ok) {\n//       return res.json();\n//     } else {\n//       return Promise.reject(`код ошибки: ${res.status}`);\n//     }\n//   }\n//   // Метод верификации токена\n//   tokenVerification (token) {\n//     return fetch(`${this._authUrl}users/me`, {\n//       // По умолчанию fetch — это GET, можно не указывать\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\" : `Bearer ${token}`\n//       }\n//     })\n//       .then(this._processingServerResponse)\n//   }\n//   // Метод авторизации пользователя\n//   userAuthorization (password, email) {\n//     return fetch(`${this._authUrl}signin`, {\n//       method: 'POST',\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ password, email })\n//     })\n//       .then(this._processingServerResponse)\n//   }\n//   // Метод регистрации пользователя\n//   userRegistration (password, email) {\n//     return fetch(`${this._authUrl}signup`, {\n//       method: 'POST',\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ password, email })\n//     })\n//       .then(this._processingServerResponse)\n//   }\n// }\n\n// // Создание экземпляра класса\n// const apiAuth = new AuthApi('https://auth.nomoreparties.co/');\n// // Экспорт экземпляра класса\n// export default apiAuth;","map":{"version":3,"names":["apiAuth","register","password","email","fetch","method","headers","body","JSON","stringify","then","response","status","json","e","res","catch","err","console","log","authorize","indentifier","data","user","localStorage","setItem","jwt"],"sources":["/Users/andrey/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["\nexport const apiAuth = 'https://auth.nomoreparties.co/';\n\nexport const register = (password, email) => {\n  return fetch(`${apiAuth}/auth/local/register`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email})\n  })\n  .then((response) => {\n    try {\n      if (response.status === 200){\n        return response.json();\n      }\n    } catch(e){\n      return (e)\n    }\n  })\n  .then((res) => {\n    return res;\n  })\n  .catch((err) => console.log(err));\n}; \n\nexport const authorize = (indentifier, password) => {\n  return fetch (`${apiAuth}/auth/local`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ password, email})\n  })\n  .then((response => response.json()))\n  .then ((data) => {\n    if (data.user) {\n      localStorage.setItem('jwt', data.jwt);\n      return data;\n    } else {\n\n    }\n  })\n  .catch(err => console.log(err))\n}\n\n\n\n// class AuthApi {\n//   constructor(authUrl) {\n//     this._authUrl = authUrl;\n//   }\n//   // Метод обработки ответа сервера\n//   _processingServerResponse (res) {\n//     if (res.ok) {\n//       return res.json();\n//     } else {\n//       return Promise.reject(`код ошибки: ${res.status}`);\n//     }\n//   }\n//   // Метод верификации токена\n//   tokenVerification (token) {\n//     return fetch(`${this._authUrl}users/me`, {\n//       // По умолчанию fetch — это GET, можно не указывать\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//         \"Authorization\" : `Bearer ${token}`\n//       }\n//     })\n//       .then(this._processingServerResponse)\n//   }\n//   // Метод авторизации пользователя\n//   userAuthorization (password, email) {\n//     return fetch(`${this._authUrl}signin`, {\n//       method: 'POST',\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ password, email })\n//     })\n//       .then(this._processingServerResponse)\n//   }\n//   // Метод регистрации пользователя\n//   userRegistration (password, email) {\n//     return fetch(`${this._authUrl}signup`, {\n//       method: 'POST',\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ password, email })\n//     })\n//       .then(this._processingServerResponse)\n//   }\n// }\n\n// // Создание экземпляра класса\n// const apiAuth = new AuthApi('https://auth.nomoreparties.co/');\n// // Экспорт экземпляра класса\n// export default apiAuth;\n"],"mappings":"AACA,OAAO,MAAMA,OAAO,GAAG,gCAAgC;AAEvD,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAQ,EAAEC,KAAK,KAAK;EAC3C,OAAOC,KAAK,CAAE,GAAEJ,OAAQ,sBAAqB,EAAE;IAC7CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC;IAAK,CAAC;EACzC,CAAC,CAAC,CACDO,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI;MACF,IAAIA,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAC;QAC1B,OAAOD,QAAQ,CAACE,IAAI,EAAE;MACxB;IACF,CAAC,CAAC,OAAMC,CAAC,EAAC;MACR,OAAQA,CAAC;IACX;EACF,CAAC,CAAC,CACDJ,IAAI,CAAEK,GAAG,IAAK;IACb,OAAOA,GAAG;EACZ,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,CAACC,WAAW,EAAEnB,QAAQ,KAAK;EAClD,OAAOE,KAAK,CAAG,GAAEJ,OAAQ,aAAY,EAAE;IACrCK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,QAAQ;MAAEC;IAAK,CAAC;EACzC,CAAC,CAAC,CACDO,IAAI,CAAEC,QAAQ,IAAIA,QAAQ,CAACE,IAAI,EAAE,CAAE,CACnCH,IAAI,CAAGY,IAAI,IAAK;IACf,IAAIA,IAAI,CAACC,IAAI,EAAE;MACbC,YAAY,CAACC,OAAO,CAAC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC;MACrC,OAAOJ,IAAI;IACb,CAAC,MAAM,CAEP;EACF,CAAC,CAAC,CACDN,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACjC,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}